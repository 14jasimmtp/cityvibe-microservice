// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: pb/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_ExecutePurchase_FullMethodName       = "/OrderService/ExecutePurchase"
	OrderService_ExecutePurchaseWallet_FullMethodName = "/OrderService/ExecutePurchaseWallet"
	OrderService_CheckOut_FullMethodName              = "/OrderService/CheckOut"
	OrderService_ViewUserOrders_FullMethodName        = "/OrderService/ViewUserOrders"
	OrderService_CancelOrder_FullMethodName           = "/OrderService/CancelOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	ExecutePurchase(ctx context.Context, in *ExecutePurchaseReq, opts ...grpc.CallOption) (*ExecutePurchaseResponse, error)
	ExecutePurchaseWallet(ctx context.Context, in *ExecutePurchaseWalletReq, opts ...grpc.CallOption) (*ExecutePurchaseWalletRes, error)
	CheckOut(ctx context.Context, in *CheckOutReq, opts ...grpc.CallOption) (*CheckOutRes, error)
	ViewUserOrders(ctx context.Context, in *ViewUserOrdersReq, opts ...grpc.CallOption) (*ViewUserOrdersRes, error)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderRes, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) ExecutePurchase(ctx context.Context, in *ExecutePurchaseReq, opts ...grpc.CallOption) (*ExecutePurchaseResponse, error) {
	out := new(ExecutePurchaseResponse)
	err := c.cc.Invoke(ctx, OrderService_ExecutePurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ExecutePurchaseWallet(ctx context.Context, in *ExecutePurchaseWalletReq, opts ...grpc.CallOption) (*ExecutePurchaseWalletRes, error) {
	out := new(ExecutePurchaseWalletRes)
	err := c.cc.Invoke(ctx, OrderService_ExecutePurchaseWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CheckOut(ctx context.Context, in *CheckOutReq, opts ...grpc.CallOption) (*CheckOutRes, error) {
	out := new(CheckOutRes)
	err := c.cc.Invoke(ctx, OrderService_CheckOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ViewUserOrders(ctx context.Context, in *ViewUserOrdersReq, opts ...grpc.CallOption) (*ViewUserOrdersRes, error) {
	out := new(ViewUserOrdersRes)
	err := c.cc.Invoke(ctx, OrderService_ViewUserOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderRes, error) {
	out := new(CancelOrderRes)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	ExecutePurchase(context.Context, *ExecutePurchaseReq) (*ExecutePurchaseResponse, error)
	ExecutePurchaseWallet(context.Context, *ExecutePurchaseWalletReq) (*ExecutePurchaseWalletRes, error)
	CheckOut(context.Context, *CheckOutReq) (*CheckOutRes, error)
	ViewUserOrders(context.Context, *ViewUserOrdersReq) (*ViewUserOrdersRes, error)
	CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderRes, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) ExecutePurchase(context.Context, *ExecutePurchaseReq) (*ExecutePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePurchase not implemented")
}
func (UnimplementedOrderServiceServer) ExecutePurchaseWallet(context.Context, *ExecutePurchaseWalletReq) (*ExecutePurchaseWalletRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePurchaseWallet not implemented")
}
func (UnimplementedOrderServiceServer) CheckOut(context.Context, *CheckOutReq) (*CheckOutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOut not implemented")
}
func (UnimplementedOrderServiceServer) ViewUserOrders(context.Context, *ViewUserOrdersReq) (*ViewUserOrdersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUserOrders not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_ExecutePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePurchaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ExecutePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ExecutePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ExecutePurchase(ctx, req.(*ExecutePurchaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ExecutePurchaseWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePurchaseWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ExecutePurchaseWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ExecutePurchaseWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ExecutePurchaseWallet(ctx, req.(*ExecutePurchaseWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CheckOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CheckOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CheckOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CheckOut(ctx, req.(*CheckOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ViewUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUserOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ViewUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ViewUserOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ViewUserOrders(ctx, req.(*ViewUserOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePurchase",
			Handler:    _OrderService_ExecutePurchase_Handler,
		},
		{
			MethodName: "ExecutePurchaseWallet",
			Handler:    _OrderService_ExecutePurchaseWallet_Handler,
		},
		{
			MethodName: "CheckOut",
			Handler:    _OrderService_CheckOut_Handler,
		},
		{
			MethodName: "ViewUserOrders",
			Handler:    _OrderService_ViewUserOrders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/order.proto",
}
