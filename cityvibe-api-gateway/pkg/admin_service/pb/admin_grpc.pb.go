// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: pkg/admin_service/pb/admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_AdminLogin_FullMethodName  = "/admin.AdminService/AdminLogin"
	AdminService_GetAllUsers_FullMethodName = "/admin.AdminService/GetAllUsers"
	AdminService_BlockUser_FullMethodName   = "/admin.AdminService/BlockUser"
	AdminService_UnBlockUser_FullMethodName = "/admin.AdminService/UnBlockUser"
	AdminService_DashBoard_FullMethodName   = "/admin.AdminService/DashBoard"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginRes, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersReq, opts ...grpc.CallOption) (*GetAllUsersRes, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*NoParam, error)
	UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*NoParam, error)
	DashBoard(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*DashBoardRes, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginRes, error) {
	out := new(AdminLoginRes)
	err := c.cc.Invoke(ctx, AdminService_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersReq, opts ...grpc.CallOption) (*GetAllUsersRes, error) {
	out := new(GetAllUsersRes)
	err := c.cc.Invoke(ctx, AdminService_GetAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*NoParam, error) {
	out := new(NoParam)
	err := c.cc.Invoke(ctx, AdminService_BlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*NoParam, error) {
	out := new(NoParam)
	err := c.cc.Invoke(ctx, AdminService_UnBlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DashBoard(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*DashBoardRes, error) {
	out := new(DashBoardRes)
	err := c.cc.Invoke(ctx, AdminService_DashBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginRes, error)
	GetAllUsers(context.Context, *GetAllUsersReq) (*GetAllUsersRes, error)
	BlockUser(context.Context, *BlockUserReq) (*NoParam, error)
	UnBlockUser(context.Context, *UnBlockUserReq) (*NoParam, error)
	DashBoard(context.Context, *NoParam) (*DashBoardRes, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminServiceServer) GetAllUsers(context.Context, *GetAllUsersReq) (*GetAllUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedAdminServiceServer) BlockUser(context.Context, *BlockUserReq) (*NoParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedAdminServiceServer) UnBlockUser(context.Context, *UnBlockUserReq) (*NoParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockUser not implemented")
}
func (UnimplementedAdminServiceServer) DashBoard(context.Context, *NoParam) (*DashBoardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashBoard not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllUsers(ctx, req.(*GetAllUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UnBlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnBlockUser(ctx, req.(*UnBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DashBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DashBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DashBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DashBoard(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _AdminService_AdminLogin_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _AdminService_GetAllUsers_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _AdminService_BlockUser_Handler,
		},
		{
			MethodName: "UnBlockUser",
			Handler:    _AdminService_UnBlockUser_Handler,
		},
		{
			MethodName: "DashBoard",
			Handler:    _AdminService_DashBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/admin_service/pb/admin.proto",
}
